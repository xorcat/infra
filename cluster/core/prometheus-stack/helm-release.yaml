---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      interval: 1h0m0s
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: 44.x
  install:
    crds: Create
  timeout: 10m
  interval: 5m0s
  upgrade:
    crds: CreateReplace
  values:
    defaultRules:
      labels:
        monitorwith: prometheus
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.1.1.240
        - 10.1.1.242
        - 10.1.1.244
    alertmanager:
      enabled: false
      ingress:
        enabled: false
        pathType: ImplementationSpecific
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - "alerts.mon.${SECRET_INTERNAL_DOMAIN}"
        tls:
          - hosts:
              - "alerts.mon.${SECRET_INTERNAL_DOMAIN}"
            secretName: "alertmanager-tls"
    grafana:
      enabled: true
      defaultDashboardsTimezone: Australia/Brisbane
      adminPassword: "${SECRET_GRAFANA_PASS}"
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "default"
              orgId: 1
              folder: ""
              type: file
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      notifiers:
        notifiers.yaml:
          notifiers:
            - name: aaron-slack
              type: slack
              uid: slacknotifier-1
              org_id: 1
              is_default: true
              settings:
                recipient: 'D4ZUNKSUE'
                username: 'flkbot'
              secure_settings:
                token: "${SECRET_SLACK_APITOKEN}"
          # delete_notifiers:
          #   - name: grafana-default-email
      dashboards:
        default:
          ceph-cluster:
            gnetId: 2842
            revision: 14
            datasource: Prometheus
          ceph-osd:
            gnetId: 5336
            revision: 5
            datasource: Prometheus
          ceph-pools:
            gnetId: 5342
            revision: 5
            datasource: Prometheus
          cilium-1-11-agent:
            gnetId: 15513
            revision: 1
            datasource: Prometheus
          cilium-1-11-hubble:
            gnetId: 15515
            revision: 1
            datasource: Prometheus
          cilium-1-11-operator:
            gnetId: 15514
            revision: 1
            datasource: Prometheus
          unifi-dpi:
            gnetId: 10419
            revision: 3
            datasource: UnifiInflux
          unifi-sites:
            gnetId: 10414
            revision: 4
            datasource: UnifiInflux
          unifi-switch:
            gnetId: 10417
            revision: 6
            datasource: UnifiInflux
          unifi-firewall:
            gnetId: 10416
            revision: 6
            datasource: UnifiInflux
          unifi-clients:
            gnetId: 10418
            revision: 6
            datasource: UnifiInflux
          unifi-wifi:
            gnetId: 10415
            revision: 5
            datasource: UnifiInflux
      plugins:
        - grafana-piechart-panel
        - grafana-clock-panel
        - natel-discrete-panel
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: UnifiInflux
              type: influxdb
              url: http://unifi-poller-influxdb.default:8086
              access: proxy
              user: admin
              database: unifi
              secureJsonData:
                password: "${SECRET_UNIFI_INFLUX_PASS}"
      ingress:
        enabled: true
        pathType: ImplementationSpecific
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - "mon.${SECRET_INTERNAL_DOMAIN}"
        tls:
          - hosts:
              - "mon.${SECRET_INTERNAL_DOMAIN}"
            secretName: "grafana-tls"
    prometheus:
      ingress:
        enabled: true
        pathType: ImplementationSpecific
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
        hosts:
          - "prom.mon.${SECRET_INTERNAL_DOMAIN}"
        tls:
          - hosts:
              - "prom.mon.${SECRET_INTERNAL_DOMAIN}"
            secretName: "prometheus-tls"
      prometheusSpec:
        replicas: 2
        podAntiAffinity: "soft"
        podMonitorNamespaceSelector: {}
        serviceMonitorSelector: {}
        ruleSelector:
          matchLabels:
            monitorwith: prometheus
        ## Using PersistentVolumeClaim
        ##
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: block
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        podMonitorSelector:
          matchLabels:
            app.kubernetes.io/component: monitoring
        resources:
          requests:
            cpu: 2000m
            memory: 4000Mi
          limits:
            memory: 4000Mi
        retention: 25d
